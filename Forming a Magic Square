func min (s []float64) int32 {
    miny := s[0]
    for _, value := range s {
        if  value < miny {
            miny=value
        }
    }
    return int32(miny)
}



func formingMagicSquare(s [][]int32) int32 {
    var a,b,c,d,e,f,g,j [][] int32
    var all [][][]int32
    var result,temp float64
    var list []float64
    
    a = [][]int32{
        []int32{8,1,6},
        []int32{3,5,7},
        []int32{4,9,2},
    }
    b = [][]int32{
        []int32{6,1,8},
        []int32{7,5,3},
        []int32{2,9,4},
    }
    c = [][]int32{
        []int32{4,9,2},
        []int32{3,5,7},
        []int32{8,1,6},
    }
    e = [][]int32{
        []int32{2,9,4},
        []int32{7,5,3},
        []int32{6,1,8},
    }
    f = [][]int32{
        []int32{8,3,4},
        []int32{1,5,9},
        []int32{6,7,2},
    }
    g = [][]int32{
        []int32{4,3,8},
        []int32{9,5,1},
        []int32{2,7,6},
    }
    d = [][]int32{
        []int32{6,7,2},
        []int32{1,5,9},
        []int32{8,3,4},
    }
    j = [][]int32{
        []int32{2,7,6},
        []int32{9,5,1},
        []int32{4,3,8},
    }
    all = append(all,a,b,c,d,e,f,g,j)
    for index,_:= range all {
        for jindex,_:= range s {
            for kindex,_:= range s {
                temp = math.Abs(float64(all[index][jindex][kindex]) - float64(s[jindex][kindex]))
                result= temp + result
            }  
        }
        list= append(list,result)
        result=0
        temp=0
    
    }
    
    return int32(min(list))

}
